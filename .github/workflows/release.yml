name: Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Bump type (leave empty if using specific_version)'
        required: false
        default: 'patch'
        type: choice
        options:
          - ''
          - patch
          - minor
          - major

      specific_version:
        description: 'or Specific version (e.g., 1.0.0)'
        required: false
        default: ''

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Step 1: Lint → Type checking first
      - name: 🔍 Run type checking and linting
        run: npm run lint

      # Step 2: Bump version → Update package.json and generate changelog
      - name: 📝 Bump version and generate changelog
        run: |
          if [ -n "${{ inputs.specific_version }}" ]; then
            npm run release:prepare -- -r ${{ inputs.specific_version }}
          elif [ -n "${{ inputs.bump_type }}" ]; then
            npm run release:prepare -- --${{ inputs.bump_type }}
          else
            echo "No bump type or version specified" && exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Get new version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: v$VERSION"

      - name: 📄 Update manifest.json version
        run: |
          VERSION=${{ steps.version.outputs.version_number }}
          echo "Updating manifest.json version to $VERSION"
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
            console.log('Updated manifest.json version to', manifest.version);
          "

      - name: 📋 Update README.md version badge
        run: |
          VERSION=${{ steps.version.outputs.version_number }}
          echo "Updating README.md version badge to $VERSION"
          sed -i.bak "s/Version-[^-]*-brightgreen/Version-$VERSION-brightgreen/g" README.md
          echo "Updated README.md version badge"

      # Step 3: Commit changes → Save version updates (but no tag yet)
      - name: 💾 Commit version updates (without tag)
        run: |
          VERSION=${{ steps.version.outputs.version_number }}
          git add package.json CHANGELOG.md manifest.json README.md
          git commit -m "chore(release): v$VERSION"
          echo "✅ Created commit for version v$VERSION (no tag yet)"

      # Step 4: Build → Create production build
      - name: 🏗️ Build extension for production
        run: |
          echo "Building extension for production..."
          npm run build
          echo "✅ Build completed successfully"

      # Step 5: Zip file → Package the extension
      - name: 📦 Create extension package
        run: |
          echo "Creating build directory and packaging extension..."
          mkdir -p build
          cd dist
          zip -r ../build/backlog-ai-ext_${{ steps.version.outputs.version }}.zip .
          cd ..
          echo "✅ Extension packaged successfully"

      # Step 6: Verify zip file → Ensure the package is valid
      - name: ✅ Verify extension package
        run: |
          echo "Verifying extension package..."
          echo "📁 Created zip file:"
          ls -la build/
          echo "📋 Package contents:"
          unzip -l build/backlog-ai-ext_${{ steps.version.outputs.version }}.zip

          # Basic validation
          if [ ! -f "build/backlog-ai-ext_${{ steps.version.outputs.version }}.zip" ]; then
            echo "❌ Package file not found!"
            exit 1
          fi

          # Check if zip is not empty
          if [ $(unzip -l build/backlog-ai-ext_${{ steps.version.outputs.version }}.zip | wc -l) -lt 5 ]; then
            echo "❌ Package appears to be empty or invalid!"
            exit 1
          fi

          echo "✅ Package verification completed successfully"

      # Step 7: Create tag → Only after everything succeeds
      - name: 🏷️ Create release tag
        run: |
          VERSION=${{ steps.version.outputs.version_number }}
          git tag "v$VERSION"
          echo "✅ Created local tag v$VERSION"

      # Step 8: Push code → Push changes and tags
      - name: 🚀 Push changes and tags
        run: |
          echo "Pushing changes and tags to repository..."
          git push origin HEAD --follow-tags
          echo "✅ Successfully pushed all changes and tags"

      # Step 9: Release → Create GitHub release with artifacts
      - name: 📋 Extract changelog for release
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version_number }}
          echo "Extracting changelog for version $VERSION"

          # Get changelog content between the current version and the next version header
          # Handle both v1.0.0 and 1.0.0 formats
          awk "/^## v?$VERSION\$/{flag=1; next} /^## v?[0-9]+\.[0-9]+\.[0-9]+/{if(flag) exit} flag" CHANGELOG.md > release_notes.txt

          # If no specific version section found, get content from top until first version
          if [ ! -s release_notes.txt ]; then
            echo "No specific version section found, extracting from top"
            awk '/^## v?[0-9]+\.[0-9]+\.[0-9]+/{if(!found){found=1; next} else exit} found' CHANGELOG.md > release_notes.txt
          fi

          echo "📋 Release notes content:"
          cat release_notes.txt

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body_path: release_notes.txt
          files: |
            build/backlog-ai-ext_${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build-${{ steps.version.outputs.version }}
          path: |
            build/
            dist/
          retention-days: 30
